Program : <none> {
  fns: [
    0: FnDef : <none> {
      name: <fib@1> : fn(i32) -> i32
      params: [
        0: VarDef <x@2> : i32
      ]
      return: i32
      given: []
      body: [
        0: ExprStmt : <none> {
          pass: IfExpr : <none> {
            clauses: [
              0: IfClause : <none> {
                cond: BinaryExpr : bool {
                  op: ">="
                  lhs: VarExpr : i32 {
                    var: <x@2> : i32
                  }
                  rhs: TypeConvertExpr : i32 {
                    expr: IntLiteralExpr(1) : <intlit>
                  }
                }
                body: [
                  0: ReturnStmt : <none> {
                    expr: TypeConvertExpr : i32 {
                      expr: IntLiteralExpr(1) : <intlit>
                    }
                  }
                ]
              }
            ]
          }
        }
        1: LetStmt : <none> {
          var: VarDef <f1@2> : i32
          mutable: false
          init: CallExpr : i32 {
            fn: VarExpr : fn(i32) -> i32 {
              var: <fib@1> : fn(i32) -> i32
            }
            args: [
              0: BinaryExpr : i32 {
                op: "-"
                lhs: VarExpr : i32 {
                  var: <x@2> : i32
                }
                rhs: TypeConvertExpr : i32 {
                  expr: IntLiteralExpr(1) : <intlit>
                }
              }
            ]
          }
        }
        2: LetStmt : <none> {
          var: VarDef <f2@2> : i32
          mutable: false
          init: CallExpr : i32 {
            fn: VarExpr : fn(i32) -> i32 {
              var: <fib@1> : fn(i32) -> i32
            }
            args: [
              0: BinaryExpr : i32 {
                op: "-"
                lhs: VarExpr : i32 {
                  var: <x@2> : i32
                }
                rhs: TypeConvertExpr : i32 {
                  expr: IntLiteralExpr(2) : <intlit>
                }
              }
            ]
          }
        }
        3: ReturnStmt : <none> {
          expr: BinaryExpr : i32 {
            op: "+"
            lhs: VarExpr : i32 {
              var: <f1@2> : i32
            }
            rhs: VarExpr : i32 {
              var: <f2@2> : i32
            }
          }
        }
      ]
    }
  ]
}