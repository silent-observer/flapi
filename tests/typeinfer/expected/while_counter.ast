Program : <none> {
  fns: [
    0: FnDef : <none> {
      name: <f@1> : fn(i32) -> i32
      params: [
        0: FnParam : i32 {
          name: <x@2> : i32
          type: i32
        }
      ]
      return: i32
      given: []
      body: [
        0: LetStmt : <none> {
          var: VarDef <i@2> : i64
          mutable: true
          init: TypeConvertExpr : i64 {
            expr: IntLiteralExpr(0) : <intlit>
          }
        }
        1: WhileStmt : <none> {
          cond: BinaryExpr : bool {
            op: "<="
            lhs: VarExpr : i64 {
              var: <i@2> : i64
            }
            rhs: TypeConvertExpr : i64 {
              expr: VarExpr : i32 {
                var: <x@2> : i32
              }
            }
          }
          body: [
            0: ExprStmt : <none> {
              expr: AssignExpr : <none> {
                lhs: VarExpr : i64 {
                  var: <i@2> : i64
                }
                rhs: BinaryExpr : i64 {
                  op: "+"
                  lhs: VarExpr : i64 {
                    var: <i@2> : i64
                  }
                  rhs: TypeConvertExpr : i64 {
                    expr: IntLiteralExpr(1) : <intlit>
                  }
                }
              }
            }
          ]
        }
        2: ReturnStmt : <none> {
          expr: VarExpr : i32 {
            var: <i@2> : i64
          }
        }
      ]
    }
  ]
}

------ ERRORS ------
Type error at (6:12): expected type i32, got i64
