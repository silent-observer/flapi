Program {
  fns: [
    0: TypeDef {
      name: <MyStruct@1>
      def: StructDef {
        fields: [
          0: VarDef <x@0> : i32
          1: VarDef <y@0> : i32
          2: VarDef <name@0> : str
        ]
      }
    }
    1: FnDef {
      name: <main@1>
      params: []
      return: ()
      given: []
      body: [
        0: LetStmt {
          var: VarDef <data@2>
          mutable: false
          init: MakeStructExpr {
            type: MyStruct
            entries: [
              0: MakeStructEntry {
                field: <x@0>
                expr: IntLiteralExpr(1)
              }
              1: MakeStructEntry {
                field: <y@0>
                expr: IntLiteralExpr(2)
              }
              2: MakeStructEntry {
                field: <name@0>
                expr: StrLiteralExpr("h")
              }
            ]
          }
        }
        1: LetStmt {
          var: VarDef <s@2>
          mutable: false
          init: BinaryExpr {
            op: "+"
            lhs: DotExpr {
              expr: VarExpr {
                var: <data@2>
              }
              field: <x@0>
            }
            rhs: DotExpr {
              expr: VarExpr {
                var: <data@2>
              }
              field: <y@0>
            }
          }
        }
        2: ExprStmt {
          expr: AssignExpr {
            op: "+="
            lhs: DotExpr {
              expr: VarExpr {
                var: <data@2>
              }
              field: <x@0>
            }
            rhs: IntLiteralExpr(10)
          }
        }
      ]
    }
  ]
}