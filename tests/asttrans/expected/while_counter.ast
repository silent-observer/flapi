Program {
  fns: [
    0: FnDef {
      name: <f@1>
      params: [
        0: VarDef <x@2> : i32
      ]
      return: i32
      given: []
      body: [
        0: LetStmt {
          var: VarDef <i@2>
          mutable: true
          init: IntLiteralExpr(0)
        }
        1: WhileStmt {
          cond: BinaryExpr {
            op: "<="
            lhs: VarExpr {
              var: <i@2>
            }
            rhs: VarExpr {
              var: <x@2>
            }
          }
          body: [
            0: ExprStmt {
              expr: AssignExpr {
                lhs: VarExpr {
                  var: <i@2>
                }
                rhs: BinaryExpr {
                  op: "+"
                  lhs: VarExpr {
                    var: <i@2>
                  }
                  rhs: IntLiteralExpr(1)
                }
              }
            }
          ]
        }
        2: ReturnStmt {
          expr: VarExpr {
            var: <i@2>
          }
        }
      ]
    }
  ]
}