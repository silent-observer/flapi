// [n] means that the token/node is present at a particular index in the CST children vector
// [*] means that the node is repeated, so it takes up unknown number of indexes
// [?] means that the index is not known in advance
// (n) means node is expected to have exactly n children
// (*) means node can have unbounded number of children
// := means that the symbol has no node of its own, forwarding to one of the defined nodes
// ! inside [] means that the node is guaranteed to be not NONE
// E inside [] means that the node can be a CST_ERROR

Program(*) = Definition*[*!E]

Definition :=
   FnDef
 | StructDef
 | EnumDef

FnDef(7) = 'def'[0!] 'IDENT'[1] FnParamList[2] ('->'[3] TypeExpr[4E])? FnModifierList?[5] Block[6]
FnParamList(*) = '('[0!] FnParam*[*!E] ')'[?]
FnParam(5) = 'IDENT'[0!] ':'[1] 'var'?[2] TypeExpr[3!E] ','?[4]
FnModifierList(*) = FnModifier+[*!]
FnModifier := GivenModifier | WithModifier
GivenModifier(*) = 'given'[0!] '('[1] ImplicitClause+[*!E] ')'[?]
WithModifier(*) = 'with'[0!] '('[1] ImplicitClause+[*!E] ')'[?]
ImplicitClause(*) = ('IDENT'[0] ':'[1])? TypeExpr[2!E] ','?[3]

Block(*) = '{'[0!] Statement+[*!E] '}'[?]
Statement :=
   ExprStmt
 | LetStmt
 | VarStmt
 | WithStmt
 | ReturnStmt
 | BreakStmt
 | ContinueStmt

ExprStmt(2) =
   BlocklessExpr[0E] ';'[1]
 | BlockExpr[0E]
LetStmt(5) = 'let'[0!] VarDef[1!] '='[2] Expr[3E] ';'[4]
VarStmt(5) = 'var'[0!] VarDef[1!] '='[2] Expr[3E] ';'[4]
WithStmt(5) = 'with'[0!] VarDef[1!] '='[2] Expr[3E] ';'[4]
VarDef(3) = 'IDENT'[0] (':'[1] TypeExpr[2E])?
ReturnStmt(3) = 'return'[0!] Expr?[1E] ';'[2]
BreakStmt(3) = 'break'[0!] Expr?[1E] ';'[2]
ContinueStmt(2) = 'continue'[0!] ';'[1]

TypeExpr :=
   BaseTypeExpr
 | GenericParamName
 | CustomTypeExpr
 | FunctionTypeExpr
 | TupleTypeExpr
BaseTypeExpr(1) = // everything is [0]
   'i8'
 | 'i16'
 | 'i32'
 | 'i64'
 | 'u8'
 | 'u16'
 | 'u32'
 | 'u64'
 | 'str'
 | 'char'
 | 'bool'

GenericParamName(2) = '%'[0!] 'IDENT'[1]
CustomTypeExpr(2) = 'IDENT'[0!] GenericArgList?[1]
GenericArgList(*) = '['[0!] TypeArg+[*!E] ']'[?]

FunctionTypeExpr(5) = FunctionSpec[0!] TupleTypeExpr[1] ('->'[2] TypeExpr[3E])? FnModifierList?[4]
FunctionSpec(5) = 'fn'[0!] ('['[1] '1'[2] ('+'[3] | '?'[3])? ']'[4])?

TupleTypeExpr(*) = '('[0!] TypeArg*[*!E] ')'[?]
TypeArg(2) = TypeExpr[0!E] ','?[1]

Expr := BlocklessExpr | BlockExpr
BlocklessExpr := SimpleExpr | AssignExpr
AssignExpr(3) = SimpleExpr[0!E] AssignOp[1!] Expr[2!E]
AssignOp := '=' | '+=' | '-=' | '*=' | '/=';
BlockExpr :=
   IfExpr
 | WhileExpr
 | LoopExpr
 | ForExpr

IfExpr(*) = IfClause[0!] ElseIfClause*[*!] ElseClause?[?!]
IfClause(3) = 'if'[0!] SimpleExpr[1E] Block[2]
ElseIfClause(4) = 'else'[0!] 'if'[1] SimpleExpr[2E] Block[3]
ElseClause(2) = 'else'[0!] Block[1]

WhileExpr(3) = 'while'[0!] SimpleExpr[1E] Block[2]
LoopExpr(2) = 'loop'[0!] Block[1]
ForExpr(5) = 'for'[0!] VarDef[1!] 'in'[2] SimpleExpr[3E] Block[4]

SimpleExpr = <Pratt Parser> (BinaryExpr(3) = UnaryExpr[0!E] BinaryOp[1!] UnaryExpr[2!E])
    L\R| * / % + - | > >= < <= == != | and or | |>
    ---|-----------|-----------------|--------|----
    *  | L L L L L | L L  L L  L  L  |  L  L  | L
    /  | ? L L L L | L L  L L  L  L  |  L  L  | L
    %  | ? ? L L L | L L  L L  L  L  |  L  L  | L
    +  | R R R L L | L L  L L  L  L  |  L  L  | L
    -  | R R R L L | L L  L L  L  L  |  L  L  | L
    ---|-----------|-----------------|--------|----
    >  | R R R R R | ? ?  ? ?  ?  ?  |  L  L  | L
    >= | R R R R R | ? ?  ? ?  ?  ?  |  L  L  | L
    <  | R R R R R | ? ?  ? ?  ?  ?  |  L  L  | L
    <= | R R R R R | ? ?  ? ?  ?  ?  |  L  L  | L
    == | R R R R R | ? ?  ? ?  ?  ?  |  L  L  | L
    != | R R R R R | ? ?  ? ?  ?  ?  |  L  L  | L
    ---|-----------|-----------------|--------|----
    and| R R R R R | R R  R R  R  R  |  L  L  | L
    or | R R R R R | R R  R R  R  R  |  R  L  | L
    ---|-----------|-----------------|--------|----
    |> | R R R R R | R R  R R  R  R  |  R  R  | L
PostfixExpr :=
   DelimetedExpr
 | DotExpr
 | DotCallExpr
 | CallExpr
 | IndexExpr

DotExpr(3) = PostfixExpr[0!E] '.'[!1] 'IDENT'[2]
DotCallExpr(5) = PostfixExpr[0!E] '.'[!1] 'IDENT'[2] ArgList?[3] LambdaExpr?[4]
CallExpr(3) = PostfixExpr[0!E] ArgList?[1] LambdaExpr?[2]
ArgList(*) = '('[0!] Arg*[*!E] ')'[?]
Arg(2) = Expr[0!E] ','?[1]
LambdaExpr(2) = LambdaParamList[0!] Block[1]
LambdaParamList(*) = '|'[0!] LambdaParam*[*!E] '|'[?]
LambdaParam(4) = 'IDENT'[0!] (':'[1] 'var'?[2] Type[3E])?
IndexExpr(4) = PostfixExpr[0!E] '['[1!] Expr[2!E] ']'[3]


DelimetedExpr :=
   LiteralExpr
 | VarExpr
 | LambdaExpr
 | ParenExpr
 | UnaryExpr

LiteralExpr(1) = // everything is [0]
   'DECIMAL'
 | 'BINARY'
 | 'STRING'
 | 'CHAR'
 | 'true'
 | 'false'
VarExpr(1) = 'IDENT'[0!]
ParenExpr(3) = '('[0!] Expr[1E] ')'[2]
UnaryExpr(2) = UnaryOp[0!] PostfixExpr[1!]
UnaryOp := '+' | '-' | 'not'

StructDef(3) = 'struct'[0] CustomTypeExpr[1] StructEntryList[2]
StructEntryList(*) = '{'[0] StructEntry*[*] '}'[?]
StructEntry(4) = 'IDENT'[0] ':'[1] Type[2] ','?[3]

EnumDef(3) = 'enum'[0] CustomTypeExpr[1] EnumEntryList[2]
EnumEntryList(*) = '{'[0] EnumEntry*[*] '}'[?]
EnumEntry :=
   EnumEntrySimple
 | EnumEntryTuple
 | EnumEntryStruct
EnumEntrySimple(1) = 'IDENT'[0]
EnumEntryTuple(2) = 'IDENT'[0] TupleTypeExpr[1]
EnumEntryStruct(2) = 'IDENT'[0] StructEntryList[1]