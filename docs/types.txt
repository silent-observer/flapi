
 Γ |- t ==> τ
-------------- (CHECK-INFER)
 Γ |- t <== τ

 Γ |- t ==> σ; σ <: τ
---------------------- (CHECK-SUBTYPE)
    Γ |- t <== τ // insert τ(t)

i8 <: i16 <: i32 <: i64 <: LIT
u8 <: u16 <: u32 <: u64 <: LIT

 Γ |- a ==> τ; Γ |- b <== τ
---------------------------- (Assign-INFER)
     Γ |- (a = b) ==> ()

 Γ |- a <== bool; Γ |- {b} <=> τ; Γ |- {c} <== τ; ... ; Γ |- {d} <== τ
----------------------------------------------------------------------- (IfElse-IC)
            Γ |- (if a {b} else if {c}... else {d}) <=> τ

 Γ |- a <== bool; Γ |- {b} <== (); Γ |- {c} <== (); ... ; Γ |- {d} <== ()
-------------------------------------------------------------------------- (If-INFER)
              Γ |- (if a {b} else if {c}...) ==> ()

∀op ∈ {+, -, *, /, %}
∀T1, T2 ∈ {i*, u*}
   Γ |- a ==> T1; Γ |- b ==> T2; τ == common(T1, T2)
----------------------------------------------------- (BinaryArith-INFER)
              Γ |- (a op b) ==> τ

∀op ∈ {==, !=, >, <, >=, <=}
∀T ∈ {i*, u*, str, char, bool}
 Γ |- a ==> T1; Γ |- b ==> T2; τ == common(T1, T2)
--------------------------------------------------- (BinaryComp-INFER)
            Γ |- (a op b) ==> bool

 Γ |- a <== bool; Γ |- b <== bool
---------------------------------- (BinaryAnd-INFER)
      Γ |- (a and b) ==> bool

 Γ |- a <== bool; Γ |- b <== bool
---------------------------------- (BinaryOr-INFER)
      Γ |- (a or b) ==> bool

   Γ |- a <== bool
--------------------- (UnaryNot-INFER)
 Γ |- not a ==> bool

∀T ∈ {i*}
 Γ |-  a <=> T
--------------- (UnaryMinus-IC)
 Γ |- -a <=> T

 Γ |- f ==> Fn(τ, ...) -> ρ; Γ |- a <== τ; ...
----------------------------------------------- (Call-INFER)
        Γ |- f(a, ...) ==> ρ

 Γ |- f ==> Fn(τ, ..., λ) -> ρ; Γ |- |b...|{c} <== λ; Γ |- a <== τ; ...
------------------------------------------------------------------------ (CallLambda-INFER)
                     Γ |- f(a, ...) |b...| {c} ==> ρ

     Γ,(a:τ...) |- {b} ==> ρ
------------------------------------ (Lambda-INFER)
 Γ |- |a:τ...| {b} ==> Fn(τ,...) -> ρ

     Γ,(a:τ...) |- {b} <== ρ
------------------------------------ (Lambda-CHECK)
 Γ |- |a...| {b} <== Fn(τ,...) -> ρ

 Γ |- a ==> struct Σ; (Σ.F : τ) ∈ Γ
------------------------------------ (Dot-INFER)
         Γ |- a.F ==> τ

# IndexExpr not supported yet

     (x : τ) ∈ Γ
-------------------- (Var)
 Γ |- (Var x) ==> τ

----------------------------- (IntLiteral)
 Γ |- (IntLiteral) ==> LIT

----------------------------- (StrLiteral)
 Γ |- (StrLiteral) ==> str

----------------------------- (CharLiteral)
 Γ |- (CharLiteral) ==> char

----------------------------- (BoolLiteral)
 Γ |- (BoolLiteral) ==> bool

=====================================================================================

 Γ, (name : fn(α...) -> ρ), (x:α), (<return>:ρ), ... |- {body}
--------------------------------------------------------------- (FnDef-DEF)
           Γ |- fn name(x: α, ...) -> ρ {body}

 Γ |- expr ==> τ; Γ |- ...
--------------------------- (Expr-STAT)
     Γ |- expr; ...

 Γ |- ...; Γ |- expr ==> τ;
---------------------------- (ExprPass-STAT)
   Γ |- {...; expr} ==> τ

 Γ |- a ==> τ; Γ, (x:τ) |- ...
------------------------------- (LetInfer-STAT)
    Γ |- let x = a; ...

 Γ |- a <== τ; Γ, (x:τ) |- ...
------------------------------- (LetCheck-STAT)
    Γ |- let x : τ = a; ...

 Γ |- a <== bool; Γ |- {b}; Γ |- {c}; Γ |- ...
----------------------------------------------- (WhileElse-STAT)
        Γ |- while a {b} else {c} ...

------------- (Break-STAT)
 Γ |- break;

---------------- (Continue-STAT)
 Γ |- continue;

        Γ |- a <== ρ
------------------------------- (Return-STAT)
 Γ,(<return> : ρ) |- return a;

=====================================================================================

    Γ, (name : fn(α...) -> ρ) |- ...
----------------------------------------- (FnDef-COLLECT)
 Γ |- fn name(x: α, ...) -> ρ {body} ...

 Γ, (Name: struct type), (Name.f1: τ), ... |- ...
-------------------------------------------------- (StructDef-COLLECT)
        Γ |- struct Name {f1: τ, ...} ...